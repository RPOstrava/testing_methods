from flask import Flask, request, jsonify

# Importuje potøebné funkce a tøídy z knihovny Flask

app = Flask(__name__)

# Inicializuje aplikaci Flask

tasks = []

# Inicializuje prázdný seznam pro ukládání úkolù

@app.route('/tasks', methods=['GET'])  # Definuje endpoint pro získání všech úkolù pomocí HTTP GET metody
def get_tasks():  # Definuje funkci pro získání všech úkolù
    return jsonify({'tasks': tasks})  # Vrací seznam všech úkolù ve formátu JSON
# Definuje GET metodu pro získání všech úkolù

@app.route('/tasks', methods=['POST'])
def create_task():
    data = request.json  # Získá data poslaná v JSON formátu
    task = {
        'id': len(tasks) + 1,  # Pøidává novému úkolu ID o jednièku vìtší než délka aktuálního seznamu úkolù
        'title': data['title'],  # Pøiøazuje název úkolu ze zaslaných dat
        'description': data['description']  # Pøiøazuje popis úkolu ze zaslaných dat
    }
    tasks.append(task)  # Pøidá nový úkol do seznamu úkolù
    return jsonify({'message': 'Task created successfully'}), 201  # Vrací zprávu o úspìšném vytvoøení úkolu a HTTP status code 201

# Definuje POST metodu pro vytvoøení nového úkolu

@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    task = next((task for task in tasks if task['id'] == task_id), None)  # Najde úkol podle ID
    if task is None:  # Pokud úkol není nalezen
        return jsonify({'error': 'Task not found'}), 404  # Vrátí chybu a HTTP status code 404
    data = request.json  # Získá data poslaná v JSON formátu
    task['title'] = data['title']  # Aktualizuje název úkolu
    task['description'] = data['description']  # Aktualizuje popis úkolu
    return jsonify({'message': 'Task updated successfully'})  # Vrací zprávu o úspìšné aktualizaci úkolu

# Definuje PUT metodu pro aktualizaci existujícího úkolu

@app.route('/tasks/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    global tasks  # Použije globální promìnnou tasks
    tasks = [task for task in tasks if task['id'] != task_id]  # Vytvoøí nový seznam úkolù bez toho, který má být smazán
    return jsonify({'message': 'Task deleted successfully'})  # Vrací zprávu o úspìšném smazání úkolu

# Definuje DELETE metodu pro smazání existujícího úkolu

if __name__ == '__main__':  # Kontroluje, zda je soubor spuštìn jako hlavní (nikoli importován jako modul)
    app.run(debug=True)  # Spustí server na portu 5000 v debug módu